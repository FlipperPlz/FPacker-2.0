//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/dev/Desktop/FPacker 2.0/FPacker 2.0/Antlr/Enforce\EnforceParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

 namespace FPacker.Antlr.Enforce; 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class EnforceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		WHITESPACES=4, PREPROCESS=5, AUTO=6, AUTOPTR=7, PRIVATE=8, PROTECTED=9, 
		STATIC=10, OVERRIDE=11, PROTO=12, NATIVE=13, NOTNULL=14, EVENT=15, EXTERNAL=16, 
		REF=17, REFERENCE=18, CONST=19, OUT=20, OWNED=21, INOUT=22, MODDED=23, 
		NEW=24, DELETE=25, CLASS=26, ENUM=27, EXTENSION=28, TYPEDEF=29, RETURN=30, 
		THIS=31, SUPER=32, LOCAL=33, THREAD=34, TYPE_INT=35, TYPE_FLOAT=36, TYPE_BOOL=37, 
		TYPE_STRING=38, TYPE_VECTOR=39, VOID=40, VOLATILE=41, IF=42, ELSE=43, 
		SWITCH=44, CASE=45, BREAK=46, FOR=47, FOREACH=48, WHILE=49, CONTINUE=50, 
		DEFAULT=51, OPEN_BRACE=52, CLOSE_BRACE=53, OPEN_BRACKET=54, CLOSE_BRACKET=55, 
		OPEN_PARENS=56, CLOSE_PARENS=57, DOT=58, COMMA=59, COLON=60, SEMICOLON=61, 
		QMARK=62, PLUS=63, MINUS=64, DQUOTE=65, STAR=66, DIV=67, PERCENT=68, AMP=69, 
		BITWISE_OR=70, CARET=71, BANG=72, TILDE=73, ASSIGNMENT=74, LT=75, GT=76, 
		OP_INC=77, OP_DEC=78, OP_AND=79, OP_OR=80, OP_EQ=81, OP_NE=82, OP_LE=83, 
		OP_GE=84, OP_LEFTSHIFT=85, OP_RIGHTSHIFT=86, OP_ADD_ASSIGN=87, OP_SUB_ASSIGN=88, 
		OP_MULT_ASSIGN=89, OP_DIV_ASSIGN=90, OP_OR_ASSIGN=91, OP_AND_ASSIGN=92, 
		OP_LEFTSHFT_ASSIGN=93, SPACE=94, OP_RIGHTSHFT_ASSIGN=95, LITERAL_STRING=96, 
		LITERAL_INTEGER=97, LITERAL_FLOAT=98, LITERAL_BOOLEAN=99, LITERAL_NULL=100, 
		IDENTIFIER=101, REUSED_MODIFIERS=102, FUNC_MODIFIER=103, FUNC_PARAM_MODIFIER=104, 
		VARIABLE_MODIFIER=105, CLASS_MODIFIER=106;
	public const int
		RULE_computationalUnit = 0, RULE_variableModifier = 1, RULE_methodModifier = 2, 
		RULE_parameterModifier = 3, RULE_globalDeclaration = 4, RULE_classDeclaration = 5, 
		RULE_classOrEnumExtension = 6, RULE_typeParameters = 7, RULE_typeParameter = 8, 
		RULE_enumDeclaration = 9, RULE_enumBody = 10, RULE_enumValue = 11, RULE_annotation = 12, 
		RULE_classBody = 13, RULE_typeDeclaration = 14, RULE_methodDeclaration = 15, 
		RULE_methodBody = 16, RULE_typeTypeOrVoid = 17, RULE_fieldDeclaration = 18, 
		RULE_variableDeclarators = 19, RULE_variableDeclarator = 20, RULE_variableDeclaratorId = 21, 
		RULE_formalParameters = 22, RULE_formalParameterList = 23, RULE_formalParameter = 24, 
		RULE_formalParameterUndefined = 25, RULE_formalParameterDefined = 26, 
		RULE_variableInitializer = 27, RULE_arrayInitializer = 28, RULE_literal = 29, 
		RULE_literalBoolean = 30, RULE_literalString = 31, RULE_literalNull = 32, 
		RULE_literalNumeric = 33, RULE_literalFloat = 34, RULE_literalInteger = 35, 
		RULE_literalVector = 36, RULE_classType = 37, RULE_block = 38, RULE_blockStatement = 39, 
		RULE_statement = 40, RULE_deleteStatment = 41, RULE_ifStatement = 42, 
		RULE_elseStatement = 43, RULE_forStatement = 44, RULE_foreachStatement = 45, 
		RULE_whileStatement = 46, RULE_switchStatement = 47, RULE_switchBlockStatementGroup = 48, 
		RULE_switchLabel = 49, RULE_forControl = 50, RULE_forInit = 51, RULE_foreachControl = 52, 
		RULE_forEachVariableList = 53, RULE_forEachVariable = 54, RULE_localVariableDeclaration = 55, 
		RULE_localVariableDeclarationRegular = 56, RULE_localVariableDeclarationAssumptuative = 57, 
		RULE_identifier = 58, RULE_parExpression = 59, RULE_expressionList = 60, 
		RULE_methodCall = 61, RULE_expression = 62, RULE_primary = 63, RULE_creator = 64, 
		RULE_createdName = 65, RULE_innerCreator = 66, RULE_arrayCreatorRest = 67, 
		RULE_classCreatorRest = 68, RULE_explicitGenericInvocation = 69, RULE_typeArgumentsOrDiamond = 70, 
		RULE_nonWildcardTypeArgumentsOrDiamond = 71, RULE_nonWildcardTypeArguments = 72, 
		RULE_typeList = 73, RULE_typeListChild = 74, RULE_typeType = 75, RULE_primitiveType = 76, 
		RULE_typeArguments = 77, RULE_typeArgument = 78, RULE_superSuffix = 79, 
		RULE_explicitGenericInvocationSuffix = 80, RULE_arguments = 81;
	public static readonly string[] ruleNames = {
		"computationalUnit", "variableModifier", "methodModifier", "parameterModifier", 
		"globalDeclaration", "classDeclaration", "classOrEnumExtension", "typeParameters", 
		"typeParameter", "enumDeclaration", "enumBody", "enumValue", "annotation", 
		"classBody", "typeDeclaration", "methodDeclaration", "methodBody", "typeTypeOrVoid", 
		"fieldDeclaration", "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
		"formalParameters", "formalParameterList", "formalParameter", "formalParameterUndefined", 
		"formalParameterDefined", "variableInitializer", "arrayInitializer", "literal", 
		"literalBoolean", "literalString", "literalNull", "literalNumeric", "literalFloat", 
		"literalInteger", "literalVector", "classType", "block", "blockStatement", 
		"statement", "deleteStatment", "ifStatement", "elseStatement", "forStatement", 
		"foreachStatement", "whileStatement", "switchStatement", "switchBlockStatementGroup", 
		"switchLabel", "forControl", "forInit", "foreachControl", "forEachVariableList", 
		"forEachVariable", "localVariableDeclaration", "localVariableDeclarationRegular", 
		"localVariableDeclarationAssumptuative", "identifier", "parExpression", 
		"expressionList", "methodCall", "expression", "primary", "creator", "createdName", 
		"innerCreator", "arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
		"typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
		"typeList", "typeListChild", "typeType", "primitiveType", "typeArguments", 
		"typeArgument", "superSuffix", "explicitGenericInvocationSuffix", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'auto'", "'autoptr'", "'private'", 
		"'protected'", "'static'", "'override'", "'proto'", "'native'", "'notnull'", 
		"'event'", "'external'", "'ref'", "'reference'", "'const'", "'out'", "'owned'", 
		"'inout'", "'modded'", "'new'", "'delete'", "'class'", "'enum'", "'extends'", 
		"'typedef'", "'return'", "'this'", "'super'", "'local'", "'thread'", "'int'", 
		"'float'", "'bool'", "'string'", "'vector'", "'void'", "'volatile'", "'if'", 
		"'else'", "'switch'", "'case'", "'break'", "'for'", "'foreach'", "'while'", 
		"'contine'", "'default'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", 
		"','", "':'", "';'", "'?'", "'+'", "'-'", "'\"'", "'*'", "'/'", "'%'", 
		"'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'++'", "'--'", 
		"'&&'", "'||'", "'=='", "'!='", "'<='", "'>='", "'<<'", "'>>'", "'+='", 
		"'-='", "'*='", "'/='", "'|='", "'&='", "'<<='", "' '", "'>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"WHITESPACES", "PREPROCESS", "AUTO", "AUTOPTR", "PRIVATE", "PROTECTED", 
		"STATIC", "OVERRIDE", "PROTO", "NATIVE", "NOTNULL", "EVENT", "EXTERNAL", 
		"REF", "REFERENCE", "CONST", "OUT", "OWNED", "INOUT", "MODDED", "NEW", 
		"DELETE", "CLASS", "ENUM", "EXTENSION", "TYPEDEF", "RETURN", "THIS", "SUPER", 
		"LOCAL", "THREAD", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", "TYPE_STRING", 
		"TYPE_VECTOR", "VOID", "VOLATILE", "IF", "ELSE", "SWITCH", "CASE", "BREAK", 
		"FOR", "FOREACH", "WHILE", "CONTINUE", "DEFAULT", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", 
		"COMMA", "COLON", "SEMICOLON", "QMARK", "PLUS", "MINUS", "DQUOTE", "STAR", 
		"DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
		"LT", "GT", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "OP_LEFTSHIFT", "OP_RIGHTSHIFT", "OP_ADD_ASSIGN", "OP_SUB_ASSIGN", 
		"OP_MULT_ASSIGN", "OP_DIV_ASSIGN", "OP_OR_ASSIGN", "OP_AND_ASSIGN", "OP_LEFTSHFT_ASSIGN", 
		"SPACE", "OP_RIGHTSHFT_ASSIGN", "LITERAL_STRING", "LITERAL_INTEGER", "LITERAL_FLOAT", 
		"LITERAL_BOOLEAN", "LITERAL_NULL", "IDENTIFIER", "REUSED_MODIFIERS", "FUNC_MODIFIER", 
		"FUNC_PARAM_MODIFIER", "VARIABLE_MODIFIER", "CLASS_MODIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnforceParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnforceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnforceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnforceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EnforceParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ComputationalUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterComputationalUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitComputationalUnit(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalUnitContext computationalUnit() {
		ComputationalUnitContext _localctx = new ComputationalUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << MODDED) | (1L << CLASS) | (1L << ENUM) | (1L << TYPEDEF) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << VOID) | (1L << VOLATILE) | (1L << OPEN_BRACKET) | (1L << SEMICOLON))) != 0) || _la==IDENTIFIER) {
				{
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 164;
					globalDeclaration();
					}
					break;
				case 2:
					{
					State = 165;
					typeDeclaration();
					}
					break;
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_variableModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << OWNED) | (1L << VOLATILE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 179;
				fieldDeclaration();
				}
				break;
			case 2:
				{
				State = 180;
				methodDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrEnumExtensionContext classOrEnumExtension() {
			return GetRuleContext<ClassOrEnumExtensionContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 183;
				annotation();
				}
			}

			State = 186;
			Match(CLASS);
			State = 187;
			identifier();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 188;
				typeParameters();
				}
			}

			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENSION || _la==COLON) {
				{
				State = 191;
				classOrEnumExtension();
				}
			}

			State = 194;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrEnumExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(EnforceParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		public ClassOrEnumExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrEnumExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassOrEnumExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassOrEnumExtension(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrEnumExtensionContext classOrEnumExtension() {
		ClassOrEnumExtensionContext _localctx = new ClassOrEnumExtensionContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrEnumExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENSION || _la==COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 197;
			typeType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(LT);
			State = 200;
			typeParameter();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 201;
				Match(COMMA);
				State = 202;
				typeParameter();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			typeTypeOrVoid();
			State = 211;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrEnumExtensionContext classOrEnumExtension() {
			return GetRuleContext<ClassOrEnumExtensionContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 213;
				annotation();
				}
			}

			State = 216;
			Match(ENUM);
			State = 217;
			identifier();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENSION || _la==COLON) {
				{
				State = 218;
				classOrEnumExtension();
				}
			}

			State = 221;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(OPEN_BRACE);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 224;
				enumValue();
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 225;
						_la = TokenStream.LA(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 226;
						enumValue();
						}
						} 
					}
					State = 231;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==SEMICOLON) {
					{
					State = 232;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
			}

			State = 237;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			identifier();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 240;
				Match(ASSIGNMENT);
				State = 241;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(EnforceParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(EnforceParser.CLOSE_BRACKET, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 24, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(OPEN_BRACKET);
			State = 245;
			expression(0);
			State = 246;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(OPEN_BRACE);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << VOID) | (1L << VOLATILE) | (1L << OPEN_BRACKET) | (1L << SEMICOLON))) != 0) || _la==IDENTIFIER) {
				{
				State = 251;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMICOLON:
					{
					State = 249;
					Match(SEMICOLON);
					}
					break;
				case AUTOPTR:
				case PRIVATE:
				case PROTECTED:
				case STATIC:
				case OVERRIDE:
				case PROTO:
				case NATIVE:
				case EVENT:
				case EXTERNAL:
				case REF:
				case REFERENCE:
				case CONST:
				case OWNED:
				case TYPEDEF:
				case TYPE_INT:
				case TYPE_FLOAT:
				case TYPE_BOOL:
				case TYPE_STRING:
				case TYPE_VECTOR:
				case VOID:
				case VOLATILE:
				case OPEN_BRACKET:
				case IDENTIFIER:
					{
					State = 250;
					globalDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 256;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeDeclaration);
		int _la;
		try {
			int _alt;
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODDED:
			case CLASS:
			case ENUM:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MODDED) {
					{
					State = 258;
					Match(MODDED);
					}
				}

				State = 263;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 261;
					classDeclaration();
					}
					break;
				case 2:
					{
					State = 262;
					enumDeclaration();
					}
					break;
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 265;
						Match(SEMICOLON);
						}
						} 
					}
					State = 270;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				}
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EnforceParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_methodDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 274;
				annotation();
				}
			}

			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << OWNED) | (1L << VOLATILE))) != 0)) {
				{
				{
				State = 277;
				methodModifier();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 283;
			typeTypeOrVoid();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TILDE) {
				{
				State = 284;
				Match(TILDE);
				}
			}

			State = 287;
			identifier();
			State = 288;
			formalParameters();
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 289;
				methodBody();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 292;
					Match(SEMICOLON);
					}
					} 
				}
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeTypeOrVoid);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 304;
				annotation();
				}
			}

			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF))) != 0)) {
				{
				{
				State = 307;
				variableModifier();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313;
			typeType();
			State = 314;
			variableDeclarators();
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 315;
					Match(SEMICOLON);
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 38, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			variableDeclarator();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 322;
				Match(COMMA);
				State = 323;
				variableDeclarator();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			variableDeclaratorId();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 330;
				Match(ASSIGNMENT);
				State = 331;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(EnforceParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(EnforceParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(EnforceParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(EnforceParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 42, RULE_variableDeclaratorId);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			identifier();
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 335;
					Match(OPEN_BRACKET);
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
						{
						State = 336;
						variableInitializer();
						}
					}

					State = 339;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 44, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(OPEN_PARENS);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << VOID))) != 0) || _la==IDENTIFIER) {
				{
				State = 346;
				formalParameterList();
				}
			}

			State = 349;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 46, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 351;
			formalParameter();
			}
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 352;
				Match(COMMA);
				State = 353;
				formalParameter();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterDefinedContext formalParameterDefined() {
			return GetRuleContext<FormalParameterDefinedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterUndefinedContext formalParameterUndefined() {
			return GetRuleContext<FormalParameterUndefinedContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 359;
				formalParameterDefined();
				}
				break;
			case 2:
				{
				State = 360;
				formalParameterUndefined();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterUndefinedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FormalParameterUndefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterUndefined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterUndefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterUndefined(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterUndefinedContext formalParameterUndefined() {
		FormalParameterUndefinedContext _localctx = new FormalParameterUndefinedContext(Context, State);
		EnterRule(_localctx, 50, RULE_formalParameterUndefined);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 363;
				parameterModifier();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 369;
			typeTypeOrVoid();
			State = 370;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterDefinedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FormalParameterDefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterDefined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterDefined(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterDefinedContext formalParameterDefined() {
		FormalParameterDefinedContext _localctx = new FormalParameterDefinedContext(Context, State);
		EnterRule(_localctx, 52, RULE_formalParameterDefined);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 372;
				parameterModifier();
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378;
			typeTypeOrVoid();
			State = 379;
			variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_variableInitializer);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(OPEN_BRACE);
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 386;
				variableInitializer();
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 387;
						Match(COMMA);
						State = 388;
						variableInitializer();
						}
						} 
					}
					State = 393;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				}
			}

			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 396;
				Match(COMMA);
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNumericContext literalNumeric() {
			return GetRuleContext<LiteralNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralVectorContext literalVector() {
			return GetRuleContext<LiteralVectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 58, RULE_literal);
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404;
				literalNumeric();
				}
				break;
			case OPEN_PARENS:
			case DQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				literalVector();
				}
				break;
			case LITERAL_BOOLEAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 406;
				literalBoolean();
				}
				break;
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 407;
				literalString();
				}
				break;
			case LITERAL_NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 408;
				literalNull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_BOOLEAN() { return GetToken(EnforceParser.LITERAL_BOOLEAN, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 60, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(LITERAL_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(EnforceParser.LITERAL_STRING, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 62, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(LITERAL_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_NULL() { return GetToken(EnforceParser.LITERAL_NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 64, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(LITERAL_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		public LiteralNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNumeric(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNumericContext literalNumeric() {
		LiteralNumericContext _localctx = new LiteralNumericContext(Context, State);
		EnterRule(_localctx, 66, RULE_literalNumeric);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417;
				literalInteger();
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				literalFloat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(EnforceParser.LITERAL_FLOAT, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 68, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(LITERAL_FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(EnforceParser.LITERAL_INTEGER, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 70, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(LITERAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext[] literalFloat() {
			return GetRuleContexts<LiteralFloatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat(int i) {
			return GetRuleContext<LiteralFloatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(EnforceParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(EnforceParser.DQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(EnforceParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(EnforceParser.SPACE, i);
		}
		public LiteralVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralVector(this);
		}
	}

	[RuleVersion(0)]
	public LiteralVectorContext literalVector() {
		LiteralVectorContext _localctx = new LiteralVectorContext(Context, State);
		EnterRule(_localctx, 72, RULE_literalVector);
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425;
				Match(OPEN_PARENS);
				State = 426;
				literalFloat();
				State = 427;
				Match(COMMA);
				State = 428;
				literalFloat();
				State = 429;
				Match(COMMA);
				State = 430;
				literalFloat();
				State = 431;
				Match(CLOSE_PARENS);
				}
				break;
			case DQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				Match(DQUOTE);
				State = 434;
				literalFloat();
				State = 435;
				Match(SPACE);
				State = 436;
				literalFloat();
				State = 437;
				Match(SPACE);
				State = 438;
				literalFloat();
				State = 439;
				Match(DQUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EnforceParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EnforceParser.DOT, i);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_classType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			identifier();
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 444;
				typeArguments();
				}
				break;
			}
			State = 454;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 447;
					Match(DOT);
					State = 448;
					identifier();
					State = 450;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 449;
						typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(OPEN_BRACE);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << NEW) | (1L << DELETE) | (1L << TYPEDEF) | (1L << RETURN) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << IF) | (1L << SWITCH) | (1L << BREAK) | (1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << CONTINUE) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << SEMICOLON) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				{
				State = 458;
				blockStatement();
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 464;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(EnforceParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_blockStatement);
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 466;
				localVariableDeclaration();
				State = 467;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 469;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public IdentifierContext identifierLabel;
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatmentContext deleteStatment() {
			return GetRuleContext<DeleteStatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_statement);
		try {
			int _alt;
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				deleteStatment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 473;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 474;
				forStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 475;
				foreachStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 476;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 477;
				switchStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 478;
				_localctx.blockLabel = block();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 479;
				Match(RETURN);
				State = 481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 480;
					expression(0);
					}
					break;
				}
				State = 486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 483;
						Match(SEMICOLON);
						}
						} 
					}
					State = 488;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 489;
				Match(BREAK);
				State = 493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 490;
						Match(SEMICOLON);
						}
						} 
					}
					State = 495;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 496;
				Match(CONTINUE);
				State = 500;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 497;
						Match(SEMICOLON);
						}
						} 
					}
					State = 502;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 503;
				_localctx.statementExpression = expression(0);
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 504;
						Match(SEMICOLON);
						}
						} 
					}
					State = 509;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 510;
				_localctx.identifierLabel = identifier();
				State = 511;
				Match(COLON);
				State = 512;
				statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 514;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public DeleteStatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatment(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatmentContext deleteStatment() {
		DeleteStatmentContext _localctx = new DeleteStatmentContext(Context, State);
		EnterRule(_localctx, 82, RULE_deleteStatment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(DELETE);
			State = 518;
			expression(0);
			State = 522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 519;
					Match(SEMICOLON);
					}
					} 
				}
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(IF);
			State = 526;
			parExpression();
			State = 529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 527;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 528;
				block();
				}
				break;
			}
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 531;
				elseStatement();
				}
				break;
			}
			State = 537;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 534;
					Match(SEMICOLON);
					}
					} 
				}
				State = 539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(ELSE);
			State = 543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 541;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 542;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(FOR);
			State = 546;
			Match(OPEN_PARENS);
			State = 547;
			forControl();
			State = 548;
			Match(CLOSE_PARENS);
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 549;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 550;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachControlContext foreachControl() {
			return GetRuleContext<ForeachControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(FOREACH);
			State = 554;
			Match(OPEN_PARENS);
			State = 555;
			foreachControl();
			State = 556;
			Match(CLOSE_PARENS);
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 557;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 558;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(WHILE);
			State = 562;
			parExpression();
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 563;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 564;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(SWITCH);
			State = 568;
			parExpression();
			State = 569;
			Match(OPEN_BRACE);
			State = 573;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 570;
					switchBlockStatementGroup();
					}
					} 
				}
				State = 575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 576;
				switchLabel();
				}
				}
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 582;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 96, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 584;
				switchLabel();
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 589;
				blockStatement();
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << NEW) | (1L << DELETE) | (1L << TYPEDEF) | (1L << RETURN) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << IF) | (1L << SWITCH) | (1L << BREAK) | (1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << CONTINUE) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << SEMICOLON) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ExpressionContext constantExpression;
		public IToken enumConstantName;
		public IdentifierContext varName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 98, RULE_switchLabel);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594;
				Match(CASE);
				State = 600;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 595;
					_localctx.constantExpression = expression(0);
					}
					break;
				case 2:
					{
					State = 596;
					_localctx.enumConstantName = Match(IDENTIFIER);
					}
					break;
				case 3:
					{
					State = 597;
					typeType();
					State = 598;
					_localctx.varName = identifier();
					}
					break;
				}
				State = 602;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				Match(DEFAULT);
				State = 604;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 100, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << NEW) | (1L << TYPEDEF) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 607;
				forInit();
				}
			}

			State = 610;
			Match(SEMICOLON);
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 611;
				expression(0);
				}
			}

			State = 614;
			Match(SEMICOLON);
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 615;
				_localctx.forUpdate = expressionList();
				}
			}

			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 618;
				Match(SEMICOLON);
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 102, RULE_forInit);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625;
				expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableListContext forEachVariableList() {
			return GetRuleContext<ForEachVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForeachControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachControl(this);
		}
	}

	[RuleVersion(0)]
	public ForeachControlContext foreachControl() {
		ForeachControlContext _localctx = new ForeachControlContext(Context, State);
		EnterRule(_localctx, 104, RULE_foreachControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			forEachVariableList();
			State = 629;
			Match(COLON);
			State = 630;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableContext[] forEachVariable() {
			return GetRuleContexts<ForEachVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableContext forEachVariable(int i) {
			return GetRuleContext<ForEachVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public ForEachVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForEachVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForEachVariableList(this);
		}
	}

	[RuleVersion(0)]
	public ForEachVariableListContext forEachVariableList() {
		ForEachVariableListContext _localctx = new ForEachVariableListContext(Context, State);
		EnterRule(_localctx, 106, RULE_forEachVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			forEachVariable();
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 633;
				Match(COMMA);
				State = 634;
				forEachVariable();
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		public ForEachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForEachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForEachVariable(this);
		}
	}

	[RuleVersion(0)]
	public ForEachVariableContext forEachVariable() {
		ForEachVariableContext _localctx = new ForEachVariableContext(Context, State);
		EnterRule(_localctx, 108, RULE_forEachVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				{
				State = 640;
				typeType();
				}
				break;
			case AUTO:
				{
				State = 641;
				Match(AUTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 644;
			variableDeclaratorId();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationRegularContext localVariableDeclarationRegular() {
			return GetRuleContext<LocalVariableDeclarationRegularContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationAssumptuativeContext localVariableDeclarationAssumptuative() {
			return GetRuleContext<LocalVariableDeclarationAssumptuativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF))) != 0)) {
				{
				{
				State = 646;
				variableModifier();
				}
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				{
				State = 652;
				localVariableDeclarationRegular();
				}
				break;
			case AUTO:
				{
				State = 653;
				localVariableDeclarationAssumptuative();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationRegularContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public LocalVariableDeclarationRegularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationRegular; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationRegular(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationRegular(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationRegularContext localVariableDeclarationRegular() {
		LocalVariableDeclarationRegularContext _localctx = new LocalVariableDeclarationRegularContext(Context, State);
		EnterRule(_localctx, 112, RULE_localVariableDeclarationRegular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			typeType();
			State = 657;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationAssumptuativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationAssumptuativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationAssumptuative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationAssumptuative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationAssumptuative(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationAssumptuativeContext localVariableDeclarationAssumptuative() {
		LocalVariableDeclarationAssumptuativeContext _localctx = new LocalVariableDeclarationAssumptuativeContext(Context, State);
		EnterRule(_localctx, 114, RULE_localVariableDeclarationAssumptuative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(AUTO);
			State = 660;
			identifier();
			State = 661;
			Match(ASSIGNMENT);
			State = 662;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(OPEN_PARENS);
			State = 667;
			expression(0);
			State = 668;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 120, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			expression(0);
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 671;
				Match(COMMA);
				State = 672;
				expression(0);
				}
				}
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(EnforceParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EnforceParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 122, RULE_methodCall);
		int _la;
		try {
			State = 712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case BANG:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 678;
					Match(BANG);
					}
				}

				State = 681;
				identifier();
				State = 682;
				Match(OPEN_PARENS);
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
					{
					State = 683;
					expressionList();
					}
				}

				State = 686;
				Match(CLOSE_PARENS);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 688;
				Match(THIS);
				State = 689;
				Match(DOT);
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 690;
					Match(BANG);
					}
				}

				State = 693;
				identifier();
				State = 694;
				Match(OPEN_PARENS);
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
					{
					State = 695;
					expressionList();
					}
				}

				State = 698;
				Match(CLOSE_PARENS);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 700;
				Match(SUPER);
				State = 701;
				Match(DOT);
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 702;
					Match(BANG);
					}
				}

				State = 705;
				identifier();
				State = 706;
				Match(OPEN_PARENS);
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
					{
					State = 707;
					expressionList();
					}
				}

				State = 710;
				Match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMP() { return GetTokens(EnforceParser.AMP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP(int i) {
			return GetToken(EnforceParser.AMP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(EnforceParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(EnforceParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(EnforceParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(EnforceParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EnforceParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(EnforceParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(EnforceParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EnforceParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(EnforceParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(EnforceParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFTSHIFT() { return GetToken(EnforceParser.OP_LEFTSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHTSHIFT() { return GetToken(EnforceParser.OP_RIGHTSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(EnforceParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(EnforceParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(EnforceParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(EnforceParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(EnforceParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(EnforceParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(EnforceParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD_ASSIGN() { return GetToken(EnforceParser.OP_ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB_ASSIGN() { return GetToken(EnforceParser.OP_SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGN() { return GetToken(EnforceParser.OP_MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(EnforceParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR_ASSIGN() { return GetToken(EnforceParser.OP_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND_ASSIGN() { return GetToken(EnforceParser.OP_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFTSHFT_ASSIGN() { return GetToken(EnforceParser.OP_LEFTSHFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHTSHFT_ASSIGN() { return GetToken(EnforceParser.OP_RIGHTSHFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EnforceParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(EnforceParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(EnforceParser.CLOSE_BRACKET, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 715;
				primary();
				}
				break;
			case 2:
				{
				State = 716;
				methodCall();
				}
				break;
			case 3:
				{
				State = 717;
				Match(NEW);
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF))) != 0)) {
					{
					{
					State = 718;
					variableModifier();
					}
					}
					State = 723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 724;
				creator();
				}
				break;
			case 4:
				{
				State = 725;
				Match(OPEN_PARENS);
				State = 726;
				typeType();
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AMP) {
					{
					{
					State = 727;
					Match(AMP);
					State = 728;
					typeType();
					}
					}
					State = 733;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 734;
				Match(CLOSE_PARENS);
				State = 735;
				expression(17);
				}
				break;
			case 5:
				{
				State = 737;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (PLUS - 63)) | (1L << (MINUS - 63)) | (1L << (OP_INC - 63)) | (1L << (OP_DEC - 63)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 738;
				expression(15);
				}
				break;
			case 6:
				{
				State = 739;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 740;
				expression(14);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 814;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 812;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 743;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 746;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IDENTIFIER:
							{
							State = 744;
							Match(IDENTIFIER);
							}
							break;
						case OPEN_PARENS:
							{
							State = 745;
							parExpression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 748;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 749;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 750;
						Match(CARET);
						State = 751;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 752;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 753;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STAR - 66)) | (1L << (DIV - 66)) | (1L << (PERCENT - 66)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 754;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 755;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 756;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (PLUS - 63)) | (1L << (MINUS - 63)) | (1L << (OP_INC - 63)) | (1L << (OP_DEC - 63)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 757;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 758;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 759;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_LEFTSHIFT || _la==OP_RIGHTSHIFT) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 760;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 761;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 762;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (LT - 75)) | (1L << (GT - 75)) | (1L << (OP_LE - 75)) | (1L << (OP_GE - 75)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 763;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 764;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 765;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 766;
						expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 767;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 768;
						_localctx.op = Match(AMP);
						State = 769;
						expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 770;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 771;
						_localctx.op = Match(TILDE);
						State = 772;
						expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 773;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 774;
						_localctx.op = Match(BITWISE_OR);
						State = 775;
						expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 776;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 777;
						_localctx.op = Match(OP_AND);
						State = 778;
						expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 779;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 780;
						_localctx.op = Match(OP_OR);
						State = 781;
						expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 782;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 783;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (ASSIGNMENT - 74)) | (1L << (OP_ADD_ASSIGN - 74)) | (1L << (OP_SUB_ASSIGN - 74)) | (1L << (OP_MULT_ASSIGN - 74)) | (1L << (OP_DIV_ASSIGN - 74)) | (1L << (OP_OR_ASSIGN - 74)) | (1L << (OP_AND_ASSIGN - 74)) | (1L << (OP_LEFTSHFT_ASSIGN - 74)) | (1L << (OP_RIGHTSHFT_ASSIGN - 74)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 784;
						expression(1);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 785;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 786;
						_localctx.op = Match(DOT);
						State = 803;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
						case 1:
							{
							State = 787;
							identifier();
							}
							break;
						case 2:
							{
							State = 788;
							methodCall();
							}
							break;
						case 3:
							{
							State = 789;
							Match(THIS);
							}
							break;
						case 4:
							{
							State = 790;
							Match(NEW);
							State = 794;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF))) != 0)) {
								{
								{
								State = 791;
								variableModifier();
								}
								}
								State = 796;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 798;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==LT) {
								{
								State = 797;
								nonWildcardTypeArguments();
								}
							}

							State = 800;
							innerCreator();
							}
							break;
						case 5:
							{
							State = 801;
							superSuffix();
							}
							break;
						case 6:
							{
							State = 802;
							explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 805;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 806;
						Match(OPEN_BRACKET);
						State = 807;
						expression(0);
						State = 808;
						Match(CLOSE_BRACKET);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 810;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 811;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_INC || _la==OP_DEC) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 126, RULE_primary);
		try {
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 817;
				Match(OPEN_PARENS);
				State = 818;
				expression(0);
				State = 819;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 821;
				Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 822;
				arrayInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 823;
				literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 824;
				identifier();
				State = 825;
				typeArguments();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 829;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 827;
					identifier();
					}
					break;
				case 2:
					{
					State = 828;
					primitiveType();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 831;
				nonWildcardTypeArguments();
				{
				State = 832;
				explicitGenericInvocationSuffix();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 128, RULE_creator);
		try {
			State = 845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 836;
				nonWildcardTypeArguments();
				State = 837;
				createdName();
				State = 838;
				classCreatorRest();
				}
				break;
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 840;
				createdName();
				State = 843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 841;
					arrayCreatorRest();
					}
					break;
				case 2:
					{
					State = 842;
					classCreatorRest();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EnforceParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EnforceParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_createdName);
		try {
			int _alt;
			State = 862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 847;
				identifier();
				State = 849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 848;
					typeArgumentsOrDiamond();
					}
					break;
				}
				State = 858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 851;
						Match(DOT);
						State = 852;
						identifier();
						State = 854;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
						case 1:
							{
							State = 853;
							typeArgumentsOrDiamond();
							}
							break;
						}
						}
						} 
					}
					State = 860;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 861;
				primitiveType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_innerCreator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			identifier();
			State = 866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 865;
				nonWildcardTypeArgumentsOrDiamond();
				}
				break;
			}
			State = 868;
			classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(EnforceParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(EnforceParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(EnforceParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(EnforceParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 134, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			Match(OPEN_BRACKET);
			State = 898;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_BRACKET:
				{
				State = 871;
				Match(CLOSE_BRACKET);
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 872;
					Match(OPEN_BRACKET);
					State = 873;
					Match(CLOSE_BRACKET);
					}
					}
					State = 878;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 879;
				arrayInitializer();
				}
				break;
			case NEW:
			case THIS:
			case SUPER:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case OPEN_BRACE:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case DQUOTE:
			case BANG:
			case TILDE:
			case LT:
			case OP_INC:
			case OP_DEC:
			case LITERAL_STRING:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_BOOLEAN:
			case LITERAL_NULL:
			case IDENTIFIER:
				{
				State = 880;
				expression(0);
				State = 881;
				Match(CLOSE_BRACKET);
				State = 888;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 882;
						Match(OPEN_BRACKET);
						State = 883;
						expression(0);
						State = 884;
						Match(CLOSE_BRACKET);
						}
						} 
					}
					State = 890;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				}
				State = 895;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 891;
						Match(OPEN_BRACKET);
						State = 892;
						Match(CLOSE_BRACKET);
						}
						} 
					}
					State = 897;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 136, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 900;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 138, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 903;
				nonWildcardTypeArguments();
				}
				break;
			}
			State = 906;
			explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 140, RULE_typeArgumentsOrDiamond);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				Match(LT);
				State = 909;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 910;
				typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 142, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 913;
				Match(LT);
				State = 914;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915;
				nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 144, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(LT);
			State = 919;
			typeList();
			State = 920;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeListChildContext[] typeListChild() {
			return GetRuleContexts<TypeListChildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListChildContext typeListChild(int i) {
			return GetRuleContext<TypeListChildContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 146, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			typeListChild();
			State = 927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 923;
				Match(COMMA);
				State = 924;
				typeListChild();
				}
				}
				State = 929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListChildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public TypeListChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeListChild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeListChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeListChild(this);
		}
	}

	[RuleVersion(0)]
	public TypeListChildContext typeListChild() {
		TypeListChildContext _localctx = new TypeListChildContext(Context, State);
		EnterRule(_localctx, 148, RULE_typeListChild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			typeType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(EnforceParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(EnforceParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(EnforceParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(EnforceParser.CLOSE_BRACKET, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_typeType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 932;
				classType();
				}
				break;
			case 2:
				{
				State = 933;
				primitiveType();
				}
				break;
			}
			State = 940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 936;
					Match(OPEN_BRACKET);
					State = 937;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(EnforceParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(EnforceParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_RIGHTSHIFT() { return GetTokens(EnforceParser.OP_RIGHTSHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHTSHIFT(int i) {
			return GetToken(EnforceParser.OP_RIGHTSHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_typeArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			Match(LT);
			{
			State = 946;
			typeArgument();
			State = 951;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 947;
					Match(COMMA);
					State = 948;
					typeArgument();
					}
					} 
				}
				State = 953;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			}
			State = 957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 954;
					_la = TokenStream.LA(1);
					if ( !(_la==GT || _la==OP_RIGHTSHIFT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 156, RULE_typeArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF))) != 0)) {
				{
				{
				State = 960;
				variableModifier();
				}
				}
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 966;
				typeType();
				}
				break;
			case 2:
				{
				State = 967;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EnforceParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 158, RULE_superSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			Match(DOT);
			State = 971;
			methodCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 160, RULE_explicitGenericInvocationSuffix);
		try {
			State = 977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 974;
				identifier();
				State = 975;
				arguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 162, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			Match(OPEN_PARENS);
			State = 981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 980;
				expressionList();
				}
			}

			State = 983;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 62: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 21);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 16);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,106,986,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,5,0,167,8,0,10,0,12,0,
		170,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,3,4,182,8,4,1,5,3,5,185,
		8,5,1,5,1,5,1,5,3,5,190,8,5,1,5,3,5,193,8,5,1,5,1,5,1,6,1,6,1,6,1,7,1,
		7,1,7,1,7,5,7,204,8,7,10,7,12,7,207,9,7,1,7,1,7,1,8,1,8,1,8,1,9,3,9,215,
		8,9,1,9,1,9,1,9,3,9,220,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,228,8,10,
		10,10,12,10,231,9,10,1,10,3,10,234,8,10,3,10,236,8,10,1,10,1,10,1,11,1,
		11,1,11,3,11,243,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,5,13,252,8,13,
		10,13,12,13,255,9,13,1,13,1,13,1,14,3,14,260,8,14,1,14,1,14,3,14,264,8,
		14,1,14,5,14,267,8,14,10,14,12,14,270,9,14,1,14,3,14,273,8,14,1,15,3,15,
		276,8,15,1,15,5,15,279,8,15,10,15,12,15,282,9,15,1,15,1,15,3,15,286,8,
		15,1,15,1,15,1,15,3,15,291,8,15,1,15,5,15,294,8,15,10,15,12,15,297,9,15,
		1,16,1,16,1,17,1,17,3,17,303,8,17,1,18,3,18,306,8,18,1,18,5,18,309,8,18,
		10,18,12,18,312,9,18,1,18,1,18,1,18,5,18,317,8,18,10,18,12,18,320,9,18,
		1,19,1,19,1,19,5,19,325,8,19,10,19,12,19,328,9,19,1,20,1,20,1,20,3,20,
		333,8,20,1,21,1,21,1,21,3,21,338,8,21,1,21,5,21,341,8,21,10,21,12,21,344,
		9,21,1,22,1,22,3,22,348,8,22,1,22,1,22,1,23,1,23,1,23,5,23,355,8,23,10,
		23,12,23,358,9,23,1,24,1,24,3,24,362,8,24,1,25,5,25,365,8,25,10,25,12,
		25,368,9,25,1,25,1,25,1,25,1,26,5,26,374,8,26,10,26,12,26,377,9,26,1,26,
		1,26,1,26,1,27,1,27,3,27,384,8,27,1,28,1,28,1,28,1,28,5,28,390,8,28,10,
		28,12,28,393,9,28,3,28,395,8,28,1,28,5,28,398,8,28,10,28,12,28,401,9,28,
		1,28,1,28,1,29,1,29,1,29,1,29,1,29,3,29,410,8,29,1,30,1,30,1,31,1,31,1,
		32,1,32,1,33,1,33,3,33,420,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,442,8,
		36,1,37,1,37,3,37,446,8,37,1,37,1,37,1,37,3,37,451,8,37,5,37,453,8,37,
		10,37,12,37,456,9,37,1,38,1,38,5,38,460,8,38,10,38,12,38,463,9,38,1,38,
		1,38,1,39,1,39,1,39,1,39,3,39,471,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
		40,1,40,1,40,3,40,482,8,40,1,40,5,40,485,8,40,10,40,12,40,488,9,40,1,40,
		1,40,5,40,492,8,40,10,40,12,40,495,9,40,1,40,1,40,5,40,499,8,40,10,40,
		12,40,502,9,40,1,40,1,40,5,40,506,8,40,10,40,12,40,509,9,40,1,40,1,40,
		1,40,1,40,1,40,3,40,516,8,40,1,41,1,41,1,41,5,41,521,8,41,10,41,12,41,
		524,9,41,1,42,1,42,1,42,1,42,3,42,530,8,42,1,42,3,42,533,8,42,1,42,5,42,
		536,8,42,10,42,12,42,539,9,42,1,43,1,43,1,43,3,43,544,8,43,1,44,1,44,1,
		44,1,44,1,44,1,44,3,44,552,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,560,
		8,45,1,46,1,46,1,46,1,46,3,46,566,8,46,1,47,1,47,1,47,1,47,5,47,572,8,
		47,10,47,12,47,575,9,47,1,47,5,47,578,8,47,10,47,12,47,581,9,47,1,47,1,
		47,1,48,4,48,586,8,48,11,48,12,48,587,1,48,4,48,591,8,48,11,48,12,48,592,
		1,49,1,49,1,49,1,49,1,49,1,49,3,49,601,8,49,1,49,1,49,1,49,3,49,606,8,
		49,1,50,3,50,609,8,50,1,50,1,50,3,50,613,8,50,1,50,1,50,3,50,617,8,50,
		1,50,5,50,620,8,50,10,50,12,50,623,9,50,1,51,1,51,3,51,627,8,51,1,52,1,
		52,1,52,1,52,1,53,1,53,1,53,5,53,636,8,53,10,53,12,53,639,9,53,1,54,1,
		54,3,54,643,8,54,1,54,1,54,1,55,5,55,648,8,55,10,55,12,55,651,9,55,1,55,
		1,55,3,55,655,8,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,
		59,1,59,1,59,1,59,1,60,1,60,1,60,5,60,674,8,60,10,60,12,60,677,9,60,1,
		61,3,61,680,8,61,1,61,1,61,1,61,3,61,685,8,61,1,61,1,61,1,61,1,61,1,61,
		3,61,692,8,61,1,61,1,61,1,61,3,61,697,8,61,1,61,1,61,1,61,1,61,1,61,3,
		61,704,8,61,1,61,1,61,1,61,3,61,709,8,61,1,61,1,61,3,61,713,8,61,1,62,
		1,62,1,62,1,62,1,62,5,62,720,8,62,10,62,12,62,723,9,62,1,62,1,62,1,62,
		1,62,1,62,5,62,730,8,62,10,62,12,62,733,9,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,3,62,742,8,62,1,62,1,62,1,62,3,62,747,8,62,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,793,
		8,62,10,62,12,62,796,9,62,1,62,3,62,799,8,62,1,62,1,62,1,62,3,62,804,8,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,813,8,62,10,62,12,62,816,9,
		62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,830,
		8,63,1,63,1,63,1,63,3,63,835,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
		64,844,8,64,3,64,846,8,64,1,65,1,65,3,65,850,8,65,1,65,1,65,1,65,3,65,
		855,8,65,5,65,857,8,65,10,65,12,65,860,9,65,1,65,3,65,863,8,65,1,66,1,
		66,3,66,867,8,66,1,66,1,66,1,67,1,67,1,67,1,67,5,67,875,8,67,10,67,12,
		67,878,9,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,887,8,67,10,67,12,
		67,890,9,67,1,67,1,67,5,67,894,8,67,10,67,12,67,897,9,67,3,67,899,8,67,
		1,68,3,68,902,8,68,1,69,3,69,905,8,69,1,69,1,69,1,70,1,70,1,70,3,70,912,
		8,70,1,71,1,71,1,71,3,71,917,8,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,5,
		73,926,8,73,10,73,12,73,929,9,73,1,74,1,74,1,75,1,75,3,75,935,8,75,1,75,
		1,75,5,75,939,8,75,10,75,12,75,942,9,75,1,76,1,76,1,77,1,77,1,77,1,77,
		5,77,950,8,77,10,77,12,77,953,9,77,1,77,5,77,956,8,77,10,77,12,77,959,
		9,77,1,78,5,78,962,8,78,10,78,12,78,965,9,78,1,78,1,78,3,78,969,8,78,1,
		79,1,79,1,79,1,80,1,80,1,80,1,80,3,80,978,8,80,1,81,1,81,3,81,982,8,81,
		1,81,1,81,1,81,0,1,124,82,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,0,16,5,0,7,10,12,12,17,19,21,21,29,29,4,0,8,13,15,17,21,21,
		41,41,7,0,7,10,12,12,14,14,17,17,19,22,29,29,33,33,2,0,28,28,60,60,2,0,
		59,59,61,61,2,0,35,39,101,101,2,0,63,64,77,78,1,0,72,73,1,0,66,68,1,0,
		85,86,2,0,75,76,83,84,1,0,81,82,3,0,74,74,87,93,95,95,1,0,77,78,1,0,35,
		39,2,0,76,76,86,86,1067,0,168,1,0,0,0,2,173,1,0,0,0,4,175,1,0,0,0,6,177,
		1,0,0,0,8,181,1,0,0,0,10,184,1,0,0,0,12,196,1,0,0,0,14,199,1,0,0,0,16,
		210,1,0,0,0,18,214,1,0,0,0,20,223,1,0,0,0,22,239,1,0,0,0,24,244,1,0,0,
		0,26,248,1,0,0,0,28,272,1,0,0,0,30,275,1,0,0,0,32,298,1,0,0,0,34,302,1,
		0,0,0,36,305,1,0,0,0,38,321,1,0,0,0,40,329,1,0,0,0,42,334,1,0,0,0,44,345,
		1,0,0,0,46,351,1,0,0,0,48,361,1,0,0,0,50,366,1,0,0,0,52,375,1,0,0,0,54,
		383,1,0,0,0,56,385,1,0,0,0,58,409,1,0,0,0,60,411,1,0,0,0,62,413,1,0,0,
		0,64,415,1,0,0,0,66,419,1,0,0,0,68,421,1,0,0,0,70,423,1,0,0,0,72,441,1,
		0,0,0,74,443,1,0,0,0,76,457,1,0,0,0,78,470,1,0,0,0,80,515,1,0,0,0,82,517,
		1,0,0,0,84,525,1,0,0,0,86,540,1,0,0,0,88,545,1,0,0,0,90,553,1,0,0,0,92,
		561,1,0,0,0,94,567,1,0,0,0,96,585,1,0,0,0,98,605,1,0,0,0,100,608,1,0,0,
		0,102,626,1,0,0,0,104,628,1,0,0,0,106,632,1,0,0,0,108,642,1,0,0,0,110,
		649,1,0,0,0,112,656,1,0,0,0,114,659,1,0,0,0,116,664,1,0,0,0,118,666,1,
		0,0,0,120,670,1,0,0,0,122,712,1,0,0,0,124,741,1,0,0,0,126,834,1,0,0,0,
		128,845,1,0,0,0,130,862,1,0,0,0,132,864,1,0,0,0,134,870,1,0,0,0,136,901,
		1,0,0,0,138,904,1,0,0,0,140,911,1,0,0,0,142,916,1,0,0,0,144,918,1,0,0,
		0,146,922,1,0,0,0,148,930,1,0,0,0,150,934,1,0,0,0,152,943,1,0,0,0,154,
		945,1,0,0,0,156,963,1,0,0,0,158,970,1,0,0,0,160,977,1,0,0,0,162,979,1,
		0,0,0,164,167,3,8,4,0,165,167,3,28,14,0,166,164,1,0,0,0,166,165,1,0,0,
		0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,
		168,1,0,0,0,171,172,5,0,0,1,172,1,1,0,0,0,173,174,7,0,0,0,174,3,1,0,0,
		0,175,176,7,1,0,0,176,5,1,0,0,0,177,178,7,2,0,0,178,7,1,0,0,0,179,182,
		3,36,18,0,180,182,3,30,15,0,181,179,1,0,0,0,181,180,1,0,0,0,182,9,1,0,
		0,0,183,185,3,24,12,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,
		186,187,5,26,0,0,187,189,3,116,58,0,188,190,3,14,7,0,189,188,1,0,0,0,189,
		190,1,0,0,0,190,192,1,0,0,0,191,193,3,12,6,0,192,191,1,0,0,0,192,193,1,
		0,0,0,193,194,1,0,0,0,194,195,3,26,13,0,195,11,1,0,0,0,196,197,7,3,0,0,
		197,198,3,150,75,0,198,13,1,0,0,0,199,200,5,75,0,0,200,205,3,16,8,0,201,
		202,5,59,0,0,202,204,3,16,8,0,203,201,1,0,0,0,204,207,1,0,0,0,205,203,
		1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,76,0,
		0,209,15,1,0,0,0,210,211,3,34,17,0,211,212,3,116,58,0,212,17,1,0,0,0,213,
		215,3,24,12,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,
		5,27,0,0,217,219,3,116,58,0,218,220,3,12,6,0,219,218,1,0,0,0,219,220,1,
		0,0,0,220,221,1,0,0,0,221,222,3,20,10,0,222,19,1,0,0,0,223,235,5,52,0,
		0,224,229,3,22,11,0,225,226,7,4,0,0,226,228,3,22,11,0,227,225,1,0,0,0,
		228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,233,1,0,0,0,231,229,
		1,0,0,0,232,234,7,4,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,
		0,235,224,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,5,53,0,0,238,
		21,1,0,0,0,239,242,3,116,58,0,240,241,5,74,0,0,241,243,3,124,62,0,242,
		240,1,0,0,0,242,243,1,0,0,0,243,23,1,0,0,0,244,245,5,54,0,0,245,246,3,
		124,62,0,246,247,5,55,0,0,247,25,1,0,0,0,248,253,5,52,0,0,249,252,5,61,
		0,0,250,252,3,8,4,0,251,249,1,0,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,
		251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,5,
		53,0,0,257,27,1,0,0,0,258,260,5,23,0,0,259,258,1,0,0,0,259,260,1,0,0,0,
		260,263,1,0,0,0,261,264,3,10,5,0,262,264,3,18,9,0,263,261,1,0,0,0,263,
		262,1,0,0,0,264,268,1,0,0,0,265,267,5,61,0,0,266,265,1,0,0,0,267,270,1,
		0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,273,1,0,0,0,270,268,1,0,0,0,
		271,273,5,61,0,0,272,259,1,0,0,0,272,271,1,0,0,0,273,29,1,0,0,0,274,276,
		3,24,12,0,275,274,1,0,0,0,275,276,1,0,0,0,276,280,1,0,0,0,277,279,3,4,
		2,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,
		283,1,0,0,0,282,280,1,0,0,0,283,285,3,34,17,0,284,286,5,73,0,0,285,284,
		1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,3,116,58,0,288,290,3,44,
		22,0,289,291,3,32,16,0,290,289,1,0,0,0,290,291,1,0,0,0,291,295,1,0,0,0,
		292,294,5,61,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,
		1,0,0,0,296,31,1,0,0,0,297,295,1,0,0,0,298,299,3,76,38,0,299,33,1,0,0,
		0,300,303,3,150,75,0,301,303,5,40,0,0,302,300,1,0,0,0,302,301,1,0,0,0,
		303,35,1,0,0,0,304,306,3,24,12,0,305,304,1,0,0,0,305,306,1,0,0,0,306,310,
		1,0,0,0,307,309,3,2,1,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,
		0,310,311,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,314,3,150,75,0,314,
		318,3,38,19,0,315,317,5,61,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,
		1,0,0,0,318,319,1,0,0,0,319,37,1,0,0,0,320,318,1,0,0,0,321,326,3,40,20,
		0,322,323,5,59,0,0,323,325,3,40,20,0,324,322,1,0,0,0,325,328,1,0,0,0,326,
		324,1,0,0,0,326,327,1,0,0,0,327,39,1,0,0,0,328,326,1,0,0,0,329,332,3,42,
		21,0,330,331,5,74,0,0,331,333,3,54,27,0,332,330,1,0,0,0,332,333,1,0,0,
		0,333,41,1,0,0,0,334,342,3,116,58,0,335,337,5,54,0,0,336,338,3,54,27,0,
		337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,341,5,55,0,0,340,335,
		1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,43,1,0,0,0,
		344,342,1,0,0,0,345,347,5,56,0,0,346,348,3,46,23,0,347,346,1,0,0,0,347,
		348,1,0,0,0,348,349,1,0,0,0,349,350,5,57,0,0,350,45,1,0,0,0,351,356,3,
		48,24,0,352,353,5,59,0,0,353,355,3,48,24,0,354,352,1,0,0,0,355,358,1,0,
		0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,47,1,0,0,0,358,356,1,0,0,0,359,
		362,3,52,26,0,360,362,3,50,25,0,361,359,1,0,0,0,361,360,1,0,0,0,362,49,
		1,0,0,0,363,365,3,6,3,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,
		0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,3,34,17,0,370,
		371,3,42,21,0,371,51,1,0,0,0,372,374,3,6,3,0,373,372,1,0,0,0,374,377,1,
		0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,
		378,379,3,34,17,0,379,380,3,40,20,0,380,53,1,0,0,0,381,384,3,56,28,0,382,
		384,3,124,62,0,383,381,1,0,0,0,383,382,1,0,0,0,384,55,1,0,0,0,385,394,
		5,52,0,0,386,391,3,54,27,0,387,388,5,59,0,0,388,390,3,54,27,0,389,387,
		1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,395,1,0,0,
		0,393,391,1,0,0,0,394,386,1,0,0,0,394,395,1,0,0,0,395,399,1,0,0,0,396,
		398,5,59,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,
		0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,53,0,0,403,57,1,0,0,0,
		404,410,3,66,33,0,405,410,3,72,36,0,406,410,3,60,30,0,407,410,3,62,31,
		0,408,410,3,64,32,0,409,404,1,0,0,0,409,405,1,0,0,0,409,406,1,0,0,0,409,
		407,1,0,0,0,409,408,1,0,0,0,410,59,1,0,0,0,411,412,5,99,0,0,412,61,1,0,
		0,0,413,414,5,96,0,0,414,63,1,0,0,0,415,416,5,100,0,0,416,65,1,0,0,0,417,
		420,3,70,35,0,418,420,3,68,34,0,419,417,1,0,0,0,419,418,1,0,0,0,420,67,
		1,0,0,0,421,422,5,98,0,0,422,69,1,0,0,0,423,424,5,97,0,0,424,71,1,0,0,
		0,425,426,5,56,0,0,426,427,3,68,34,0,427,428,5,59,0,0,428,429,3,68,34,
		0,429,430,5,59,0,0,430,431,3,68,34,0,431,432,5,57,0,0,432,442,1,0,0,0,
		433,434,5,65,0,0,434,435,3,68,34,0,435,436,5,94,0,0,436,437,3,68,34,0,
		437,438,5,94,0,0,438,439,3,68,34,0,439,440,5,65,0,0,440,442,1,0,0,0,441,
		425,1,0,0,0,441,433,1,0,0,0,442,73,1,0,0,0,443,445,3,116,58,0,444,446,
		3,154,77,0,445,444,1,0,0,0,445,446,1,0,0,0,446,454,1,0,0,0,447,448,5,58,
		0,0,448,450,3,116,58,0,449,451,3,154,77,0,450,449,1,0,0,0,450,451,1,0,
		0,0,451,453,1,0,0,0,452,447,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,
		455,1,0,0,0,455,75,1,0,0,0,456,454,1,0,0,0,457,461,5,52,0,0,458,460,3,
		78,39,0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,
		0,462,464,1,0,0,0,463,461,1,0,0,0,464,465,5,53,0,0,465,77,1,0,0,0,466,
		467,3,110,55,0,467,468,5,61,0,0,468,471,1,0,0,0,469,471,3,80,40,0,470,
		466,1,0,0,0,470,469,1,0,0,0,471,79,1,0,0,0,472,516,3,82,41,0,473,516,3,
		84,42,0,474,516,3,88,44,0,475,516,3,90,45,0,476,516,3,92,46,0,477,516,
		3,94,47,0,478,516,3,76,38,0,479,481,5,30,0,0,480,482,3,124,62,0,481,480,
		1,0,0,0,481,482,1,0,0,0,482,486,1,0,0,0,483,485,5,61,0,0,484,483,1,0,0,
		0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,516,1,0,0,0,488,
		486,1,0,0,0,489,493,5,46,0,0,490,492,5,61,0,0,491,490,1,0,0,0,492,495,
		1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,516,1,0,0,0,495,493,1,0,0,
		0,496,500,5,50,0,0,497,499,5,61,0,0,498,497,1,0,0,0,499,502,1,0,0,0,500,
		498,1,0,0,0,500,501,1,0,0,0,501,516,1,0,0,0,502,500,1,0,0,0,503,507,3,
		124,62,0,504,506,5,61,0,0,505,504,1,0,0,0,506,509,1,0,0,0,507,505,1,0,
		0,0,507,508,1,0,0,0,508,516,1,0,0,0,509,507,1,0,0,0,510,511,3,116,58,0,
		511,512,5,60,0,0,512,513,3,80,40,0,513,516,1,0,0,0,514,516,5,61,0,0,515,
		472,1,0,0,0,515,473,1,0,0,0,515,474,1,0,0,0,515,475,1,0,0,0,515,476,1,
		0,0,0,515,477,1,0,0,0,515,478,1,0,0,0,515,479,1,0,0,0,515,489,1,0,0,0,
		515,496,1,0,0,0,515,503,1,0,0,0,515,510,1,0,0,0,515,514,1,0,0,0,516,81,
		1,0,0,0,517,518,5,25,0,0,518,522,3,124,62,0,519,521,5,61,0,0,520,519,1,
		0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,83,1,0,0,0,524,
		522,1,0,0,0,525,526,5,42,0,0,526,529,3,118,59,0,527,530,3,78,39,0,528,
		530,3,76,38,0,529,527,1,0,0,0,529,528,1,0,0,0,530,532,1,0,0,0,531,533,
		3,86,43,0,532,531,1,0,0,0,532,533,1,0,0,0,533,537,1,0,0,0,534,536,5,61,
		0,0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,
		85,1,0,0,0,539,537,1,0,0,0,540,543,5,43,0,0,541,544,3,78,39,0,542,544,
		3,76,38,0,543,541,1,0,0,0,543,542,1,0,0,0,544,87,1,0,0,0,545,546,5,47,
		0,0,546,547,5,56,0,0,547,548,3,100,50,0,548,551,5,57,0,0,549,552,3,78,
		39,0,550,552,3,76,38,0,551,549,1,0,0,0,551,550,1,0,0,0,552,89,1,0,0,0,
		553,554,5,48,0,0,554,555,5,56,0,0,555,556,3,104,52,0,556,559,5,57,0,0,
		557,560,3,78,39,0,558,560,3,76,38,0,559,557,1,0,0,0,559,558,1,0,0,0,560,
		91,1,0,0,0,561,562,5,49,0,0,562,565,3,118,59,0,563,566,3,78,39,0,564,566,
		3,76,38,0,565,563,1,0,0,0,565,564,1,0,0,0,566,93,1,0,0,0,567,568,5,44,
		0,0,568,569,3,118,59,0,569,573,5,52,0,0,570,572,3,96,48,0,571,570,1,0,
		0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,579,1,0,0,0,575,
		573,1,0,0,0,576,578,3,98,49,0,577,576,1,0,0,0,578,581,1,0,0,0,579,577,
		1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,583,5,53,0,
		0,583,95,1,0,0,0,584,586,3,98,49,0,585,584,1,0,0,0,586,587,1,0,0,0,587,
		585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,591,3,78,39,0,590,589,
		1,0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,97,1,0,0,0,
		594,600,5,45,0,0,595,601,3,124,62,0,596,601,5,101,0,0,597,598,3,150,75,
		0,598,599,3,116,58,0,599,601,1,0,0,0,600,595,1,0,0,0,600,596,1,0,0,0,600,
		597,1,0,0,0,601,602,1,0,0,0,602,606,5,60,0,0,603,604,5,51,0,0,604,606,
		5,60,0,0,605,594,1,0,0,0,605,603,1,0,0,0,606,99,1,0,0,0,607,609,3,102,
		51,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,612,5,61,0,0,
		611,613,3,124,62,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,
		616,5,61,0,0,615,617,3,120,60,0,616,615,1,0,0,0,616,617,1,0,0,0,617,621,
		1,0,0,0,618,620,5,61,0,0,619,618,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,
		0,621,622,1,0,0,0,622,101,1,0,0,0,623,621,1,0,0,0,624,627,3,110,55,0,625,
		627,3,120,60,0,626,624,1,0,0,0,626,625,1,0,0,0,627,103,1,0,0,0,628,629,
		3,106,53,0,629,630,5,60,0,0,630,631,3,124,62,0,631,105,1,0,0,0,632,637,
		3,108,54,0,633,634,5,59,0,0,634,636,3,108,54,0,635,633,1,0,0,0,636,639,
		1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,107,1,0,0,0,639,637,1,0,0,
		0,640,643,3,150,75,0,641,643,5,6,0,0,642,640,1,0,0,0,642,641,1,0,0,0,643,
		644,1,0,0,0,644,645,3,42,21,0,645,109,1,0,0,0,646,648,3,2,1,0,647,646,
		1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,654,1,0,0,
		0,651,649,1,0,0,0,652,655,3,112,56,0,653,655,3,114,57,0,654,652,1,0,0,
		0,654,653,1,0,0,0,655,111,1,0,0,0,656,657,3,150,75,0,657,658,3,38,19,0,
		658,113,1,0,0,0,659,660,5,6,0,0,660,661,3,116,58,0,661,662,5,74,0,0,662,
		663,3,124,62,0,663,115,1,0,0,0,664,665,7,5,0,0,665,117,1,0,0,0,666,667,
		5,56,0,0,667,668,3,124,62,0,668,669,5,57,0,0,669,119,1,0,0,0,670,675,3,
		124,62,0,671,672,5,59,0,0,672,674,3,124,62,0,673,671,1,0,0,0,674,677,1,
		0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,121,1,0,0,0,677,675,1,0,0,0,
		678,680,5,72,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,
		3,116,58,0,682,684,5,56,0,0,683,685,3,120,60,0,684,683,1,0,0,0,684,685,
		1,0,0,0,685,686,1,0,0,0,686,687,5,57,0,0,687,713,1,0,0,0,688,689,5,31,
		0,0,689,691,5,58,0,0,690,692,5,72,0,0,691,690,1,0,0,0,691,692,1,0,0,0,
		692,693,1,0,0,0,693,694,3,116,58,0,694,696,5,56,0,0,695,697,3,120,60,0,
		696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,699,5,57,0,0,699,713,
		1,0,0,0,700,701,5,32,0,0,701,703,5,58,0,0,702,704,5,72,0,0,703,702,1,0,
		0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,3,116,58,0,706,708,5,56,0,
		0,707,709,3,120,60,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,
		711,5,57,0,0,711,713,1,0,0,0,712,679,1,0,0,0,712,688,1,0,0,0,712,700,1,
		0,0,0,713,123,1,0,0,0,714,715,6,62,-1,0,715,742,3,126,63,0,716,742,3,122,
		61,0,717,721,5,24,0,0,718,720,3,2,1,0,719,718,1,0,0,0,720,723,1,0,0,0,
		721,719,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,721,1,0,0,0,724,742,
		3,128,64,0,725,726,5,56,0,0,726,731,3,150,75,0,727,728,5,69,0,0,728,730,
		3,150,75,0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,
		0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,57,0,0,735,736,3,124,62,
		17,736,742,1,0,0,0,737,738,7,6,0,0,738,742,3,124,62,15,739,740,7,7,0,0,
		740,742,3,124,62,14,741,714,1,0,0,0,741,716,1,0,0,0,741,717,1,0,0,0,741,
		725,1,0,0,0,741,737,1,0,0,0,741,739,1,0,0,0,742,814,1,0,0,0,743,746,10,
		13,0,0,744,747,5,101,0,0,745,747,3,118,59,0,746,744,1,0,0,0,746,745,1,
		0,0,0,747,748,1,0,0,0,748,813,3,124,62,14,749,750,10,12,0,0,750,751,5,
		71,0,0,751,813,3,124,62,13,752,753,10,11,0,0,753,754,7,8,0,0,754,813,3,
		124,62,12,755,756,10,10,0,0,756,757,7,6,0,0,757,813,3,124,62,11,758,759,
		10,9,0,0,759,760,7,9,0,0,760,813,3,124,62,10,761,762,10,8,0,0,762,763,
		7,10,0,0,763,813,3,124,62,9,764,765,10,7,0,0,765,766,7,11,0,0,766,813,
		3,124,62,8,767,768,10,6,0,0,768,769,5,69,0,0,769,813,3,124,62,7,770,771,
		10,5,0,0,771,772,5,73,0,0,772,813,3,124,62,6,773,774,10,4,0,0,774,775,
		5,70,0,0,775,813,3,124,62,5,776,777,10,3,0,0,777,778,5,79,0,0,778,813,
		3,124,62,4,779,780,10,2,0,0,780,781,5,80,0,0,781,813,3,124,62,3,782,783,
		10,1,0,0,783,784,7,12,0,0,784,813,3,124,62,1,785,786,10,21,0,0,786,803,
		5,58,0,0,787,804,3,116,58,0,788,804,3,122,61,0,789,804,5,31,0,0,790,794,
		5,24,0,0,791,793,3,2,1,0,792,791,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,
		0,794,795,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,797,799,3,144,72,0,798,
		797,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,804,3,132,66,0,801,804,
		3,158,79,0,802,804,3,138,69,0,803,787,1,0,0,0,803,788,1,0,0,0,803,789,
		1,0,0,0,803,790,1,0,0,0,803,801,1,0,0,0,803,802,1,0,0,0,804,813,1,0,0,
		0,805,806,10,20,0,0,806,807,5,54,0,0,807,808,3,124,62,0,808,809,5,55,0,
		0,809,813,1,0,0,0,810,811,10,16,0,0,811,813,7,13,0,0,812,743,1,0,0,0,812,
		749,1,0,0,0,812,752,1,0,0,0,812,755,1,0,0,0,812,758,1,0,0,0,812,761,1,
		0,0,0,812,764,1,0,0,0,812,767,1,0,0,0,812,770,1,0,0,0,812,773,1,0,0,0,
		812,776,1,0,0,0,812,779,1,0,0,0,812,782,1,0,0,0,812,785,1,0,0,0,812,805,
		1,0,0,0,812,810,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,
		0,815,125,1,0,0,0,816,814,1,0,0,0,817,818,5,56,0,0,818,819,3,124,62,0,
		819,820,5,57,0,0,820,835,1,0,0,0,821,835,5,31,0,0,822,835,3,56,28,0,823,
		835,3,58,29,0,824,825,3,116,58,0,825,826,3,154,77,0,826,835,1,0,0,0,827,
		830,3,116,58,0,828,830,3,152,76,0,829,827,1,0,0,0,829,828,1,0,0,0,830,
		835,1,0,0,0,831,832,3,144,72,0,832,833,3,160,80,0,833,835,1,0,0,0,834,
		817,1,0,0,0,834,821,1,0,0,0,834,822,1,0,0,0,834,823,1,0,0,0,834,824,1,
		0,0,0,834,829,1,0,0,0,834,831,1,0,0,0,835,127,1,0,0,0,836,837,3,144,72,
		0,837,838,3,130,65,0,838,839,3,136,68,0,839,846,1,0,0,0,840,843,3,130,
		65,0,841,844,3,134,67,0,842,844,3,136,68,0,843,841,1,0,0,0,843,842,1,0,
		0,0,844,846,1,0,0,0,845,836,1,0,0,0,845,840,1,0,0,0,846,129,1,0,0,0,847,
		849,3,116,58,0,848,850,3,140,70,0,849,848,1,0,0,0,849,850,1,0,0,0,850,
		858,1,0,0,0,851,852,5,58,0,0,852,854,3,116,58,0,853,855,3,140,70,0,854,
		853,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,851,1,0,0,0,857,860,1,
		0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,863,1,0,0,0,860,858,1,0,0,0,
		861,863,3,152,76,0,862,847,1,0,0,0,862,861,1,0,0,0,863,131,1,0,0,0,864,
		866,3,116,58,0,865,867,3,142,71,0,866,865,1,0,0,0,866,867,1,0,0,0,867,
		868,1,0,0,0,868,869,3,136,68,0,869,133,1,0,0,0,870,898,5,54,0,0,871,876,
		5,55,0,0,872,873,5,54,0,0,873,875,5,55,0,0,874,872,1,0,0,0,875,878,1,0,
		0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,
		899,3,56,28,0,880,881,3,124,62,0,881,888,5,55,0,0,882,883,5,54,0,0,883,
		884,3,124,62,0,884,885,5,55,0,0,885,887,1,0,0,0,886,882,1,0,0,0,887,890,
		1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,895,1,0,0,0,890,888,1,0,0,
		0,891,892,5,54,0,0,892,894,5,55,0,0,893,891,1,0,0,0,894,897,1,0,0,0,895,
		893,1,0,0,0,895,896,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,898,871,1,
		0,0,0,898,880,1,0,0,0,899,135,1,0,0,0,900,902,3,162,81,0,901,900,1,0,0,
		0,901,902,1,0,0,0,902,137,1,0,0,0,903,905,3,144,72,0,904,903,1,0,0,0,904,
		905,1,0,0,0,905,906,1,0,0,0,906,907,3,160,80,0,907,139,1,0,0,0,908,909,
		5,75,0,0,909,912,5,76,0,0,910,912,3,154,77,0,911,908,1,0,0,0,911,910,1,
		0,0,0,912,141,1,0,0,0,913,914,5,75,0,0,914,917,5,76,0,0,915,917,3,144,
		72,0,916,913,1,0,0,0,916,915,1,0,0,0,917,143,1,0,0,0,918,919,5,75,0,0,
		919,920,3,146,73,0,920,921,5,76,0,0,921,145,1,0,0,0,922,927,3,148,74,0,
		923,924,5,59,0,0,924,926,3,148,74,0,925,923,1,0,0,0,926,929,1,0,0,0,927,
		925,1,0,0,0,927,928,1,0,0,0,928,147,1,0,0,0,929,927,1,0,0,0,930,931,3,
		150,75,0,931,149,1,0,0,0,932,935,3,74,37,0,933,935,3,152,76,0,934,932,
		1,0,0,0,934,933,1,0,0,0,935,940,1,0,0,0,936,937,5,54,0,0,937,939,5,55,
		0,0,938,936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,
		151,1,0,0,0,942,940,1,0,0,0,943,944,7,14,0,0,944,153,1,0,0,0,945,946,5,
		75,0,0,946,951,3,156,78,0,947,948,5,59,0,0,948,950,3,156,78,0,949,947,
		1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,957,1,0,0,
		0,953,951,1,0,0,0,954,956,7,15,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,
		955,1,0,0,0,957,958,1,0,0,0,958,155,1,0,0,0,959,957,1,0,0,0,960,962,3,
		2,1,0,961,960,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,
		964,968,1,0,0,0,965,963,1,0,0,0,966,969,3,150,75,0,967,969,3,116,58,0,
		968,966,1,0,0,0,968,967,1,0,0,0,969,157,1,0,0,0,970,971,5,58,0,0,971,972,
		3,122,61,0,972,159,1,0,0,0,973,978,1,0,0,0,974,975,3,116,58,0,975,976,
		3,162,81,0,976,978,1,0,0,0,977,973,1,0,0,0,977,974,1,0,0,0,978,161,1,0,
		0,0,979,981,5,56,0,0,980,982,3,120,60,0,981,980,1,0,0,0,981,982,1,0,0,
		0,982,983,1,0,0,0,983,984,5,57,0,0,984,163,1,0,0,0,121,166,168,181,184,
		189,192,205,214,219,229,233,235,242,251,253,259,263,268,272,275,280,285,
		290,295,302,305,310,318,326,332,337,342,347,356,361,366,375,383,391,394,
		399,409,419,441,445,450,454,461,470,481,486,493,500,507,515,522,529,532,
		537,543,551,559,565,573,579,587,592,600,605,608,612,616,621,626,637,642,
		649,654,675,679,684,691,696,703,708,712,721,731,741,746,794,798,803,812,
		814,829,834,843,845,849,854,858,862,866,876,888,895,898,901,904,911,916,
		927,934,940,951,957,963,968,977,981
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
